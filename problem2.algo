
// GETTING THE PRODUCT OF V1 AND v2

PROCEDURE dot_procedure(VAR v1,VAR v2) // Naming the procedure
VAR
  ps,i : integer := 0 // declaring variables
BEGIN
  IF (v1.length == v2.length) THEN  // If the length of V1 is equal to v2 it would run else it would skip
    FOR i FROM 0 TO v1.length-1 STEP 1  DO // It would run a loop through the vectors to multiply them by themselves
      ps = ps + v1[i] * v2[i]; // After multiplying the values, add it to the value of ps
    END_FOR
    write(ps);  // Write out PS
  END_IF
END



ALGORITHM orthogonal //Checking if the function is orthogonal
VAR
  i,j : INTEGER := 0;

BEGIN

    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM 0 TO 1 STEP 1  DO
            // enter elements of vector pairs [i][j]
            Read (vector_pairs[i][j])
        END_FOR
    END_FOR
        // loop through vector pairs to check for orthogonality
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM 1 TO n-1 STEP step  DO
            IF (i<>j) THEN                                          // to ensure a vector pair is not multiplied by itself
                dot_product (vector_pairs[i], vector_pairs[j])      // call procedure to get dot product of 2 vector pairs
                IF (ps = 0) THEN                                    //
                    Write ("Vector Pairs ", i " and ", j " are orthogonal")     // if vectors are orthogonal, write msg 
                    ELSE
                      Write ("Vector Pairs ", i " and ", j " are orthogonal")  
                END_IF
            END_IF
        END_FOR
    END_FOR
END_FOR

END